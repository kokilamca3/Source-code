{"name": "test_login", "status": "broken", "statusDetails": {"message": "AttributeError: png", "trace": "self = <test.test_hotel.TestEmployee object at 0x000002389A818A60>, setup = None\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_login(self, setup):\n        s1 = Base()\n        l1 = Login_page(self.d)\n        s1.set_text(l1.get_txt_username(), \"Koku123ve\")\n        s1.set_text(l1.get_txt_password(), \"Koku123ve\")\n        s1.btn_click(l1.get_btn_id())\n>       allure.attach(self.d.get_screenshot_as_png(), name=\"screenshot\", attachment_type=AttachmentType.png)\n\ntest_hotel.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'AttachmentType'>, name = 'png'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: png\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\enum.py:405: AttributeError"}, "start": 1624946624425, "stop": 1624946629617, "uuid": "dc046c85-93e0-42dc-8943-61e8cf5cf636", "historyId": "44455b45563e2354b5bff5ecd16be8ce", "testCaseId": "fc1ce517eda1fd5d586d490dd0830654", "fullName": "test_hotel.TestEmployee#test_login", "labels": [{"name": "severity", "value": "critical"}, {"name": "suite", "value": "test_hotel"}, {"name": "subSuite", "value": "TestEmployee"}, {"name": "host", "value": "DESKTOP-47B2QC9"}, {"name": "thread", "value": "16928-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_hotel"}]}